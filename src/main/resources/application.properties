spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

# mybatis
mybatis.type-aliases-package=com.hjy.miaosha.domain
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=30
mybatis.mapperLocations = classpath:com:/hjy/miaosha/dao/*.xml

#durid
spring.datasource.url=jdbc:mysql://localhost:3306/miaosha?useUnicode=true&characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=100
spring.datasource.minIdle=100
spring.datasource.maxActive=1000
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true


#redis
# Redis服务器地址 本机
redis.host=127.0.0.1
# Redis服务器连接端口
redis.port=6379
redis.timeout=10
# Redis服务器连接密码（默认为空）
redis.password=123456
# 连接池中的最大连接数
redis.poolMaxTotal=100
# 连接池中的最大空闲连接
redis.poolMaxIdle=50
# 连接池最大阻塞等待时间（使用负值表示没有限制）
redis.poolMaxWait=20

#static
# 启动静态资源处理
spring.resources.add-mappings=true
# 客户端该缓存的时间
spring.resources.cache.period = 3600
# 查找链加缓存
spring.resources.chain.cache=true
# 开启查找链
spring.resources.chain.enabled=true
# 压缩
spring.resources.chain.compressed=true
spring.resources.chain.html-application-cache=true
# 静态文件路径
spring.resources.static-locations=classpath:/static/

#rabbitmq
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/
#\u6D88\u8D39\u8005\u6570\u91CF
# 消费者数量
spring.rabbitmq.listener.simple.concurrency= 10     
spring.rabbitmq.listener.simple.max-concurrency= 10
#\u6D88\u8D39\u8005\u6BCF\u6B21\u4ECE\u961F\u5217\u83B7\u53D6\u7684\u6D88\u606F\u6570\u91CF
# Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).
# 每次处理1个
spring.rabbitmq.listener.simple.prefetch= 1
#\u6D88\u8D39\u8005\u81EA\u52A8\u542F\u52A8
# 消费者自动启动
spring.rabbitmq.listener.simple.auto-startup=true
#\u6D88\u8D39\u5931\u8D25\uFF0C\u81EA\u52A8\u91CD\u65B0\u5165\u961F
# 消费者消费失败  重新压入队列
spring.rabbitmq.listener.simple.default-requeue-rejected= true
#\u542F\u7528\u53D1\u9001\u91CD\u8BD5
# Whether publishing retries are enabled. 是否启用发布重试。
spring.rabbitmq.template.retry.enabled=true 
# Duration between the first and second attempt to deliver a message.
# 第一次和第二次尝试传递消息之间的持续时间。
spring.rabbitmq.template.retry.initial-interval=1000ms
# Maximum number of attempts to deliver a message.重试3次
spring.rabbitmq.template.retry.max-attempts=3
spring.rabbitmq.template.retry.max-interval=10000
spring.rabbitmq.template.retry.multiplier=1.0

